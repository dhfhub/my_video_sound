====================================================================
lesson2:编译FFmpeg
1.maxos 用脚本进行交叉编译ffmpeg(生成多个cpu架构的静态库)
./2.build-ffmpeg.sh > 1.log

2.使用lipo -info xxx.a 查看1个静态lib的cpu架构
lipo -info 2.complie_ffmpeg_on_mac/thin/x86_64/lib/libavcodec.a
x86_64
====================================================================
lesson2:ffmpeg Mac ios编译补充01
1.最普通的编译ffmpeg不进行交叉编译
cd ffmpeg-3.3
./configure --prefix=$PWD/output_static --enable-static
或者
./configure --prefix=$PWD/output_shared --enable-shared

make -j5
make install 生成x86_64架构 bin可执行文件,lib,share,incluce到output_static

mkdir /Users/ybx/www/libffmpeg_static
cp output_static/lib output/include /User/ybx/libffmpeg_static
libffmpeg_static 就可以在开发macos程序时候使用这个libffmpeg_static
====================================================================
lesson2:ffmpeg Mac ios编译补充02
1.macos下qtcreator使用libffmpeg进行简单开发
下载最新的qt-creator http://download.qt.io/official_releases/qt/5.11/
安装位置:/Users/ybx/app/Qt5.11.3

打开qtcreator->file->choose
名称:testFFmpeg
创建路径:/Users/ybx/www/video_sound/3.csdn_ffmpeg5/2.complie_ffmpeg/2.ffmpeg_mac_ios_complie_add02
把 /Users/ybx/www/video_sound/3.csdn_ffmpeg5/2.complie_ffmpeg/1.complie_ffmpeg_on_mac/FFmpeg-iOS/
放到 /Users/ybx/www/video_sound/3.csdn_ffmpeg5/2.complie_ffmpeg/2.ffmpeg_mac_ios_complie_add02/testFFmpeg
并且FFmpeg改名为libffmpeg

2.将qt项目转换成xcode项目
注意/Users/ybx/app/Qt5.11.3/5.11.3/clang_64/bin里才有qmake
qmake -spec macx-xcode testFFmepg.pro
生成testFFmpeg.xcodeproj
xcode打开后直接可以run
====================================================================
lesson2:ffmpeg Mac ios编译补充03
做1个xcode iphone 项目3.testiOS 还是用libffmpeg做库进行开发
1.xcode创建项目到3.testiOS
iphone->signal view application->语言选oc 不要coreData/unit test/ui test

2.关闭xcode arc功能(xcode自动生成解决变量引用计数的代码功能)
xcode中间project->3.testiOS->Build Settings->Basic->搜索arc
objective-c Automatic Reference Counting 选NO

3.添加libffmpeg
cp -rf  1.complie_ffmpeg_on_mac/FFmpeg-iOS/ 3.testiOS/3.testiOS/libffmpeg
4.在xcode把libffmpeg链接进来
xcode 中间targets中3.testiOS->Build Phases->Link Binary With Libraries->add other 选libffmpeg中的xxx.a

5.看一下如果不是就需要自己加
xcode 中间targets中3.testiOS->Build Settings->Basic->Libraries Search Paths
内容为 $(inherited) $(PROJECT_DIR)/3.testiOS/libffmpeg/lib
xcode 中间targets中3.testiOS->Build Settings->All->Header Search Paths
内容为 $(inherited) $(PROJECT_DIR)/3.testiOS/libffmpeg/include

5.AppDelegate.m 修改后运行iphone6做模拟器
