make -n:该选项会显示命令，但不会执行命令，十分有助于分析Makefile

===============================================================
1.FFmpeg中与Makefile相关的文件主要有以下几个：
根目录Makefile：最基本的Makefile；
config.mak：由configure生成的Makefile，保存了Configure的设置信息；
libavXXXX/Makefile：每个类库的Makefile（仅仅设置了几个变量）；
library.mak：编译类库的Makefile（和libavXXXX/Makefile配合使用）；
common.mak：包含一些通用代码的Makefile；
XXX.c：C语言文件；
XXX.h：C语言文件用到的头文件；
XXX.o：C语言文件对应的目标文件；
XXX.d：C语言文件对应的依赖关系文件；

install-progs依赖于ffmpeg.exe，ffplay.exe，ffprobe.exe以及install-progs-yes伪目标。
在CONFIG_SHARED取值为yes的情况下，install-progs-yes依赖于install-libs。

install-libs依赖于伪目标install-libs-yes。
install-libs-yes的依赖关系位于library.mak文件中。
如果CONFIG_STATIC取值为yes，install-libs-yes依赖于install-lib$(NAME)-static（其中${NAME}为类库文件名，例如avformat）；
如果CONFIG_SHARED取值为yes，install-libs-yes依赖于install-lib$(NAME)-shared。

install-headers依赖于伪目标install-lib$(NAME)-headers和install-lib$(NAME)-pkgconfig。

===============================================================
2.Make Install 之间的关系
install伪目标依赖于4个伪目标：
install-progs：安装应用程序ffmpeg.exe，ffplay.exe，ffprobe.exe；
install-data：安装数据（*.ffpreset之类的文件，没研究过）
install-libs：安装类库（libavcodec.dll等文件）
install-headers：安装头文件（libavcodec/avcodec.h等文件）

install-progs
依赖于ffmpeg.exe，ffplay.exe，ffprobe.exe以及install-progs-yes伪目标。
在CONFIG_SHARED取值为yes的情况下，install-progs-yes依赖于install-libs。

install-libs
依赖于伪目标install-libs-yes。
install-libs-yes的依赖关系位于library.mak文件中。
如果CONFIG_STATIC取值为yes，install-libs-yes依赖于install-lib$(NAME)-static（其中${NAME}为类库文件名，例如avformat）；
如果CONFIG_SHARED取值为yes，install-libs-yes依赖于install-lib$(NAME)-shared。

install-headers依赖于伪目标install-lib$(NAME)-headers和install-lib$(NAME)-pkgconfig。
和install相对应，uninstall伪目标依赖于4个伪目标：
uninstall-progs：卸载应用程序；
uninstall-data：卸载数据；
uninstall-libs：卸载类库；
uninstall-headers：卸载头文

其中uninstall-libs和uninstall-headers的依赖关系位于library.mak中。


======================================================================================
根目录Makefile
根目录Makefile是最重要的。
根目录Makefile代码一开始的时候包含了config.mak文件。
这个文件是运行./configure的后生成的配置文件，包含了所有的配置信息。
随后代码定义了ffplay.exe，ffmpeg.exe，ffprobe.exe与ffplay_g.exe，ffmpeg_g.exe，ffprobe_g.exe的依赖关系。
然后定义了ffplay_g.exe，ffmpeg_g.exe，ffprobe_g.exe与libavformat，libavcodec等这些类库的依赖关系。
根目录Makefile中也定义了all，install，uninstall，clean等等一系列的伪目标，这样可以通过给Makefile指定不同的目标来完成不同的事。
此外根目录的Makefile中有一个很重要的命令包DOSUBDIR。在该命令包通过包含libavXXX/Makefile和library.mak等文件，定义了FFmpeg类库（例如libavformat，libavcodec，libavutil等）的依赖关系。

======================================================================================
config.mak
config.mak文件是运行./configure的后生成的配置文件，包含了所有的配置信息。
config.mak代码大致可以分为以下几类信息：
（1）各种路径（prefix等）
（2）工具集（arch、cc、ld、yasm等）
（3）参数集（cppflag、cflag、ldflag等）
（4）前缀后缀（.a、.dll、.exe等）
（5）类库版本（libavXXX_version信息）
（6）组件配置。这一部分信息使用{组件名}=yes的方式进行书写。对于不支持的组件，则在该组件所在行的前面标记上“！”号（感叹号似乎在Makefile语法中并没有什么特殊的用意，此处可能仅仅是作为一种标记？）。
		这一部分可以分为3类信息：
		a)	ARCH_信息
		b)	HAVE_信息
		c)CONFIG_信息。这一部分内容最多，将近有1000行。
（7）Test信息（测试组件的结果？还没研究）

======================================================================================
libavXXXX/Makefile
libavXXXX/Makefile指的是FFmpeg类库（libavformat、libavcodec、libavutil等）所在的文件夹下的Makefile。

从代码可以看出，libavformat文件夹下的Makefile的规则十分简单，并不包含文件之间的依赖关系
（依赖关系位于library.mak中），仅仅是设置了几个变量的值：
NAME：类库名称。注意不包含类库前面的“lib”以及类库的后缀。在这里是“avformat”。
FFLIBS：该类库依赖的类库名称。在这里用到了“avcodec”和“avutil”。
HEADERS：该类库导出的头文件。在这里是“avformat.h”，“avio.h”，“version.h”。
OBJS：该类库依赖的目标文件（必须的）。在这里是“utils.o”等等。
OBJS-yes：该类库依赖的目标文件（可选的）。在这里是“flvdec.o”、“flvenc.o”等等。

======================================================================================
library.mak
library.mak专门用于存储编译类库的规则，是和libavXXX/Makefile配合使用的。它的源代码如下所示。
library.mak代码中首先包含了common.mak文件。这个文件定义了通用的一些编译规则。然后定义了类库的依赖关系。
此外library.mak中也定义了install-headers，install-lib$(NAME)-shared，install-lib$(NAME)-static，install-lib$(NAME)-headers，clean等等一系列的伪目标（NAME取值avformat、avcodec等）。这些目标主要配合根目录的Makefile使用。

======================================================================================
common.mak
common.mak文件定义了通用的一些编译规则

从代码中可以看出，common.mak定义了一些通用的编译规则，
例如编译时候的控制台输出格式，编译命令COMPILE_C、COMPILE_CXX、COMPILE_S，以及.c、.o等文件之间的依赖关系等
